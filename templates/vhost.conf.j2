{%- if item.ssl_enabled is defined and item.ssl_enabled == true and item.port == 443 and (item.rewrite is not defined or item.rewrite != false) %}
server {
  listen 80;
  server_name {{ item.hostname }}{% if item.aliases is defined %}{% for alias in item.aliases %} {{ alias }}{% endfor %}{% endif %};
  return 301 https://$host$request_uri;
  access_log /var/log/nginx/{{ item.hostname | replace('.', '_') }}_{{ item.port | default('port')}}.access.log main;
  error_log /var/log/nginx/{{ item.hostname | replace('.', '_') }}_{{ item.port | default('port')}}.error.log;
        location /nginx_status {
          stub_status on;
          access_log   off;
          allow 172.16.0.22;
          deny all;
        }  
}
{%- endif %}

proxy_cache_path /var/lib/nginx/cache/{{ item.app_name }} levels=1:2 keys_zone={{ item.app_name }}:10m;

server {

  {% if item.port is defined %}
  listen {{ item.port }};
  {% elif item.ssl_enabled is defined %}
  listen {{ item.ssl_enabled | ternary('443', '80') }};
  {% else %}
  listen 80;
  {% endif %}

  server_name {{ item.hostname }}{% if item.aliases is defined %}{% for alias in item.aliases %} {{ alias }}{% endfor %}{% endif %};
  {%- if item.server_trace is defined and item.server_trace == false %}
  if ($request_method ~ ^(TRACE|OPTIONS)$ )
    {
      return 444;
    }
  {%- endif %}

  access_log /var/log/nginx/{{ item.hostname | replace('.', '_') }}_{{ item.port | default('port')}}.access.log main;
  error_log /var/log/nginx/{{ item.hostname | replace('.', '_') }}_{{ item.port | default('port')}}.error.log;

  {% if item.auth_basic is defined %}
  auth_basic "{{ item.auth_basic.message | default('Authenticate')}}";
  auth_basic_user_file {{ item.auth_basic.htpasswd_file}};
  {% endif %}

  {% if item.index is defined %}
  index {{ item.index }};
  {% endif %}
  {%- if item.server_tokens is defined and item.server_tokens == false %}
  server_tokens off;
  {% endif %}

  {% if item.ssl_enabled is defined and item.ssl_enabled == true %}
  ssl on;
  ssl_certificate     /etc/nginx/ssl/{{ item.hostname | replace('.','_')}}.crt;
  ssl_certificate_key /etc/nginx/ssl/{{ item.hostname | replace('.','_')}}.key;
  ssl_protocols       {{ item.ssl_protocols | default('TLSv1 TLSv1.1 TLSv1.2') }};
  ssl_ciphers         {{ item.ssl_ciphers | default('HIGH:!aNULL:!MD5') }};
  {% endif %}

  {%- if nginx_track_xff is defined and nginx_track_xff == true %}
  # This block is to overcome the F5's obfuscating the originating client IP.
  # Combined with use of an HTTP profile on the F5 that passes the header
  # X-Forwarded-For, such as 'httpxff' this should result in nginx logging
  # a client IP derived from the header instead of the connection's source IP.
  set_real_ip_from {{ environment_lb_internal_net|default('0.0.0.0/0') }};
  real_ip_recursive off;
  real_ip_header x-forwarded-for;
  {%- endif %}

  {%- if item.custom is defined %}
  {%- for option in item.custom %}
  {{ option }};
  {%- endfor %}
  {%- endif %}

  location /app-down {
    default_type 'application/json';
    return 502 '{name: "{{ item.app_name }}", status:"down"}';
  }

{% for rule in item.rules %}

  location {{ rule.location }} {

    {% if rule.document_root is defined %}
      {% if rule.document_root.startswith('/') %}
        root {{ rule.document_root }};
      {% else %}
        root /usr/share/nginx/html/{{ rule.document_root }};
      {% endif %}

      {% if rule.try_files is defined %}
        try_files {{ rule.try_files }};
      {% endif %}

    {% elif rule.redirect is defined %}
      rewrite ^/(.*)$ {{ rule.redirect }}/$1 permanent;
    {% else %}
      {% if rule.disable_x_forwarded_headers is not defined %}
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
      {% endif %}
      proxy_set_header Host $http_host;

      {%- if rule.options is defined %}
      {%- for option in rule.options %}
      {{ option }};
      {%- endfor %}
      {%- endif %}

      {% if rule.rewrite_to is defined %}
        rewrite ^{{ rule.location.rstrip("/") }}(?:/(.*))? {{ rule.rewrite_to.rstrip("/") }}/$1 break;
      {% endif %}

      {% if rule.downstream is defined %}
        proxy_pass {{ rule.scheme | default('http') }}://{{ rule.downstream }};
      {% elif rule.upstreams is defined %}
        proxy_pass {{ rule.scheme | default('http') }}://{{ item.app_name | replace('.', '_') }}_{{ rule.port }}_upstreams;
      {% else %}
        proxy_pass {{ rule.scheme | default('http') }}://localhost:{{ rule.port }};
      {% endif %}

      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";

      {% if rule.intercept_errors is defined %}
      proxy_intercept_errors on;
      error_page 500 502 /errors/500;
      error_page 400 /errors/400;
      error_page 404 /errors/404;
      {% endif %}

      {% if rule.proxy_set_header is defined %}
        {% for header in rule.proxy_set_header %}
          proxy_set_header {{ header.key }} {{ header.value }};
        {% endfor %}
      {% endif %}

      {% if rule.intercept_errors is defined %}
      location /errors {

        internal;
        proxy_cache {{ item.app_name }};
        proxy_cache_revalidate on;
        proxy_cache_use_stale updating http_500 http_502;
        proxy_cache_lock on;
        proxy_cache_valid any 60m;
        proxy_ignore_headers Cache-Control Expires;

        location /errors/400 {
          {% if rule.downstream is defined %}
            proxy_pass {{ rule.scheme | default('http') }}://{{ rule.downstream }}/errors/400;
          {% elif rule.upstreams is defined %}
            proxy_pass {{ rule.scheme | default('http') }}://{{ item.app_name | replace('.', '_') }}_upstreams/errors/400;
          {% else %}
            proxy_pass {{ rule.scheme | default('http') }}://localhost:{{ rule.port }}/errors/400;
          {% endif %}
        }

        location /errors/500 {
          {% if rule.downstream is defined %}
            proxy_pass {{ rule.scheme | default('http') }}://{{ rule.downstream }}/errors/500;
          {% elif rule.upstreams is defined %}
            proxy_pass {{ rule.scheme | default('http') }}://{{ item.app_name | replace('.', '_') }}_upstreams/errors/500;
          {% else %}
            proxy_pass {{ rule.scheme | default('http') }}://localhost:{{ rule.port }}/errors/500;
          {% endif %}
        }

        location /errors/404 {
          {% if rule.downstream is defined %}
            proxy_pass {{ rule.scheme | default('http') }}://{{ rule.downstream }}/errors/404;
          {% elif rule.upstreams is defined %}
            proxy_pass {{ rule.scheme | default('http') }}://{{ item.app_name | replace('.', '_') }}_upstreams/errors/404;
          {% else %}
            proxy_pass {{ rule.scheme | default('http') }}://localhost:{{ rule.port }}/errors/404;
          {% endif %}
        }

      }
      {% endif %}

    {% endif %}{# End of else #}

  }
{% endfor %} {# End of for rule in item.rules #}
}
# end of locations

# upstreams if needed
{% for rule in item.rules %}
  {% if rule.upstreams is defined %}
    upstream {{ item.app_name | replace('.', '_') }}_{{ rule.port }}_upstreams {
      {% if rule.sticky_session is defined and rule.sticky_session == true %}
        ip_hash;
      {% endif %}
      {% for upstream in rule.upstreams %}
        server {{ upstream }}:{{ rule.port }};
      {% endfor %}
    }
  {% endif %}
{% endfor %}
